{\rtf1\ansi\ansicpg1252\deff0\deflang1053{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sl240\slmult1\lang29\b\f0\fs28 F\'f6rmiddag\fs22\par
\b0\par
Idag \'e4r det dags att g\'f6ra kursutv\'e4rderingen f\'f6r f\'f6rra kursen.\par
\par
\b\fs28 Jespers f\'f6rel\'e4sning\b0\fs22\par
Programmeringsmetodik. Det \'e4r programmering och handlar om metodik. Det finns m\'e5nga spr\'e5k att anv\'e4nda och m\'e5nga "best practice" hur man ska g\'f6ra osv. Det \'e4r ett brett \'e4mne. Ditt intresse avg\'f6r var du hamnar till sist.\par
\par
Det finns en facebookgrupp som heter kodapor. Jesper rekommenderar den f\'f6r alla IT-relaterade fr\'e5gor och funderingar, samt insyn i vad alla i branschen g\'f6r.\par
\par
Programmering \'e4r att ge instruktioner till datorn. Metodiken handlar om hur man ska g\'f6ra det. Termerna och metodiken \'e4r de samma \'e4ven f\'f6r andra spr\'e5k, om man g\'e5r vidare senare. Metodik \'e4r hur man ska jobba med programmeringen.\par
\par
N\'e4sta vecka g\'e5r vi in mer p\'e5 djupet. \par
\par
Vem programmerar? Vi programmerar. G\'f6r vi det ensamma eller tillsammans? Jesper vill att vi ska jobba tillsammans; inte sno fr\'e5n varandra utan hj\'e4lpa varandra. En viktig del av kursen \'e4r hur man delar kod med varandra och hj\'e4lper varandra.\par
\par
Har ni sett serien Mr. Robot? Han jobbar mer ensam som en hacker. Hans kod ses inte \'f6ver av andra. Det har varit s\'e5 att man sitter mycket sj\'e4lv och l\'f6ser uppgifter p\'e5 egen hand.\par
\par
Hur definieras ordet programming om man s\'f6ker p\'e5 Google? (1) \i The procesess of writing computer programs. "programming languages" (2) The process of scheduling something, especially radio or television programmes.\i0  Det \'e4r ju det vi g\'f6r n\'e4r vi programmerar, schemal\'e4gger.\par
\par
Processen att skriva dataprogram \'e4r inte enkel. Programmet g\'f6r inte sin grej f\'f6r evigt utan att beh\'f6va underh\'e5llas. Ett datorprogram \i\'e4r s\'e4llan skrivet av en person\i0 . Man kommer att jobba i team. D\'e5 uppst\'e5r samordningsproblem n\'e4r det olika personer skrivit ska sammanf\'f6ras till ett program. \par
\par
Ingen kod skrivs felfritt fr\'e5n b\'f6rjan. Det \'e4r alltid en process d\'e4r fels\'f6kning beh\'f6vs och man m\'e5ste \'e5tg\'e4rda n\'e5got fel. Visserligen kanske det inte g\'e5r fel om man bara skrivit en variabel, men n\'e4r man h\'e5ller p\'e5 med st\'f6rre projekt kommer inget man skriver vara perfekt. Man f\'e5r ist\'e4llet t\'e4nka att om kunden \'e4r n\'f6jd \'e4r alla n\'f6jda; perfektion uppn\'e5s inte. N\'e4r ett program v\'e4l \'e4r felfritt, n\'e4r en sida v\'e4l fungerar som den ska, kommer n\'e5gon s\'e4ga att det ska l\'e4ggas till n\'e5got. \par
\par
Eventuella l\'f6sningar. Det \'e4r n\'e5got vi ska l\'e4ra oss under kursens g\'e5ng. Vi ska ocks\'e5 f\'f6rs\'f6ka binda ihop den h\'e4r kursen med den andra. En eventuell l\'f6sning p\'e5 problemet att koden skrivs av m\'e5nga personer \'e4r versionshantering. Att bara skicka koden fram och tillbaka \'e4r inte det optimala s\'e4ttet. Vi kommer g\'e5 igenom git. \par
\par
Peer Code Review, att inspektera varandras kod p\'e5 ett effektivt s\'e4tt. Vi kommer se p\'e5 varandras kod. Det sv\'e5ra \'e4r att ge effektiv feedback. Jobba med att f\'f6rklara kod f\'f6r varandra och f\'f6rb\'e4ttra programmet, inte bara fixa syntax errors.\par
\par
Pseudoprogrammering. Att beskriva hur programmering fungerar utan att skriva kod. Det ska kunna \'f6vers\'e4ttas till alla programmeringsspr\'e5k. Man s\'e4ger v\'e4ldigt exakt hur man ska g\'f6ra, i klartext, hur programmet fungerar och fl\'f6dar. Pseudoprogrammering kan inte k\'f6ras som kod.\par
\par
Programmerarjargon. Hur man pratar kring programmering, alla termer och ord. G\'e5r man in p\'e5 nyhetsbrev om JavaScript eller liknande anv\'e4nds m\'e5nga termer och ord som kan vara sv\'e5ra att f\'f6rst\'e5. Vi kommer in p\'e5 hur man pratar om programmering. \par
\par
Olika programmeringsspr\'e5k och deras relation till JavaScript. Hur fungerar det om man inte har JavaScript? Kan olika  programmeringsspr\'e5k g\'f6ra olika saker? De olika programmeringsspr\'e5ken har skapats d\'e5 folk tr\'f6ttnat p\'e5 andra spr\'e5k. N\'e5gon har skapat n\'e5got eget eftersom JavaScript inte svarar mot alla behov.\par
\par
Programmeringsparadigm. Hur man programmerar p\'e5 ett effektivt s\'e4tt, n\'e5got som \'e4r popul\'e4rt. Samma spr\'e5k kan ha olika programmeringsparadigm, olika stilar f\'f6r hur koden k\'f6rs.\par
\par
Som Jesper sa i m\'e5ndags: JavaScript \'e4r ett dynamist och tolkat spr\'e5k. Vi kommer g\'e5 igenom termerna under kursens g\'e5ng. Konsekvenserna att ett spr\'e5k \'e4r skrivet p\'e5 ett visst s\'e4tt. Vad \'e4r f\'f6rdelana med ett dynamiskt eller statiskt spr\'e5k.\par
\par
Andra grejer vi ska g\'e5 igenom... Olika ramverk, vad det \'e4r och vad det finns f\'f6r ramverk. Ramverk \'e4r f\'f6rdefinierade strukturer. Det \'e4r inte bara att anv\'e4nda JavaScript utan \'e4ven en struktur som finns om man anv\'e4nder ett ramverk. Men man beh\'f6ver inte skriva s\'e5 mycket sj\'e4lv. Vi kommer att prata om olika bibliotek i JavaScript och vad skillnaden \'e4r mellan ramverk och bibliotek. \par
\par
\'d6vriga utvecklingsverktyg. Vad \'e4r utvecklingsmilj\'f6 och produktionsmilj\'f6 (sa han produktionsmilj\'f6?)? Vi kommer g\'e5 in p\'e5 hur det fungerar. N\'e4r vi programmerar nu \'e4r det utvecklingsmilj\'f6: Det \'e4r inte meningen att n\'e5gon annan ska se det vi programmerar. Men om det ska l\'e4ggas upp m\'e5ste allt ses \'f6ver s\'e5 att det inte \'e4r konstiga kommentarer etc. d\'e5 det ska anv\'e4ndas av andra.  Vi kommer g\'e5 igenom mera termer.\par
\par
\b Examination\b0\par
Det kommer en skriftlig examination; en tenta. Det blir ocks\'e5 inl\'e4mningsuppgifter som \'e4r mer praktiska. Det kommer vara kopplat till det vi g\'e5tt igenom och ska inte vara \'f6verv\'e4ldigande.\par
\par
N\'e5got som Jesper m\'e4rkt n\'e4r han undervisat programmering \'e4r att elever inte kunnat hantera kommandotolken eller terminalen. Det \'e4r en uppgift i sig att l\'e4ra sig att bli v\'e4n med kommandotolken. Detta ska vi g\'f6ra idag. Det kommer att ge mycket l\'e4ngre fram.\par
\par
\i Allt \i0 kan g\'f6ras i kommandotolken (terminalen/bash/shell). Skapa eller ta bort filer och mappar osv. Man kan g\'f6ra samma saker fast med kommando. Det liknar programmering. Git som vi ska anv\'e4nda senare, och Node, anv\'e4nder kommandotolken. L\'e4r man sig det fr\'e5n grunden kan man g\'f6ra allt oavsett plattform. Ibland kanske det inte finns n\'e5got program som g\'f6r allt grafiskt \'e5t en och d\'e5 kan man anv\'e4nda kommandotolken.\par
\par
Ladda ned git:\par
{\field{\*\fldinst{HYPERLINK "https://git-scm.com/downloads"}}{\fldrslt{\ul\cf1 https://git-scm.com/downloads}}}\f0\fs22\par
\par
Bash \'e4r b\'e4ttre \'e4n kommandotolken. N\'e4r man laddar ned git f\'e5r man GIT BASH som vi ska anv\'e4nda.\par
\par
G\'f6r Command Line Tutorial p\'e5 CodeAcademy.\par
{\field{\*\fldinst{HYPERLINK "https://www.codecademy.com/learn/learn-the-command-line"}}{\fldrslt{\ul\cf1 https://www.codecademy.com/learn/learn-the-command-line}}}\f0\fs22\par
\par
Det finns en uppgift p\'e5 studentportalen som vi ska g\'f6ra efter tutorialen.\par
-----------------------------------------------\par
Det g\'e5r att koda i kommandotolken men vanligare \'e4r att flytta mappar osv.\par
\par
Imorgon b\'f6rjar vi med git.\par
-----------------------------------------------\par
\b\fs28 Eftermiddag\b0\fs22\par
Versionshantering. Vi t\'e4nker oss att vi har en mapp med n\'e5gon sorts fil med den ursprungliga filen i. Den kommer \'e4ndras flera g\'e5nger under arbetets g\'e5ng. N\'e5gon person g\'f6r en \'e4ndring p\'e5 filen, eller du g\'f6r en \'e4ndring p\'e5 n\'e5gon annans fil. D\'e5 skapar man en annan fil med ett annat namn. F\'f6r varje liten \'e4ndring skapar man en ny fil. Till slut vet man inte vilken fil som \'e4r vilken. Man kanske r\'e5kar \'e4ndra i en gammal fil. Det blir sv\'e5rt att h\'e5lla reda p\'e5 vilken fil som \'e4r den senaste versionen och vilken som inneh\'e5ller vilken \'e4ndring. Det \'e4r h\'e4r versionshantering kommer in.\par
\par
Det g\'e4ller att h\'e5lla koll p\'e5 vilka \'e4ndringar som sker n\'e4r. Version, revision eller source control \'e4r ett system f\'f6r att hantera \'e4ndringar i samlingar av information, t.ex. en JavaScript fil eller kod. \par
\par
git \'e4r ett versionshanteringsverktyg. Det ska hj\'e4lpa oss att h\'e5lla koll p\'e5 v\'e5ra filer. Man vill beh\'e5lla alla versioner. Det kan ju h\'e4nda att den senaste versionen inte var tillr\'e4ckligt bra eller koden inte fungerade som den skulle. Man kan vilja g\'e5 tillbaka till en gammal version. Det kan man g\'f6ra med versionshantering. \par
\par
Varje version f\'e5r ett speciellt nummer som \'e4r unikt. Man kan komma \'e5t varje specifik \'e4ndring. N\'e4r n\'e5got \'e4ndras l\'e4ggs ett timestamp till, en tidpunkt d\'e5 \'e4ndringen skedde. Anv\'e4ndarnamnet p\'e5 den som gjort \'e4ndringen sparas. Vad \'e4ndringen inneh\'e5ller. Git \'e4r ett verktyg f\'f6r att g\'f6ra allt detta.\par
\par
F\'f6rdelarna med att h\'e5lla koll p\'e5 detta \'e4r backup och \'e5terst\'e4llning om n\'e5got g\'e5r fel; man vet om versionen man har \'e4r den senaste eller om det \'e4r en \'e4ldre; det finns en historik \'f6ver alla \'e4ndringar som skett (vad, n\'e4r, av vem); dokumentation och kommentarer av de som \'e4ndrat n\'e5got samt att det blir enklare f\'f6r flera personer att arbeta med samma filer.\par
\par
Centralized/Distributed VCS. Vi vill ha backup. Alla vill ha den senaste versionen. Detta g\'f6r man genom ett \i repository\i0 ; man laddar upp filerna p\'e5 en server. I sin tur skickar servern meddelanden om att uppdateringar skett. Det finns tv\'e5 s\'e4tt att g\'f6ra det p\'e5. Vi kommer att anv\'e4nda den distribuerade versionen d\'e4r filerna finns b\'e5de p\'e5 v\'e5r dator och p\'e5 servern. Med centraliserad version ligger filerna bara p\'e5 servern. \par
\par
Wikipedia \'e4r ett exempel p\'e5 ett repository, en centraliserad versionshantering. Wikipedia h\'e5ller koll p\'e5 allt som skickas in. Man kan visa historik f\'f6r varje sida. Alla \'e4ndringar som n\'e5gonsin gjorts sparas och man kan se vilken anv\'e4ndare som gjort dem, vad som \'e4ndrats osv. (F\'f6r det mesta \'e4r det d\'e4remot bottar som laddar upp information p\'e5 Wikipedia.)\par
\par
Google drive \'e4r ett annat exempel. \par
\par
I git kan man ocks\'e5 s\'f6ka p\'e5 vad som h\'e4nt. Man kan s\'f6ka p\'e5 ett visst datum eller ett visst meddelande. \par
\par
Relationen git/github. Github \'e4r bara en hemsida eller server man laddar upp material p\'e5 med hj\'e4lp av git. Git \'e4r verktyget man anv\'e4nder men det beh\'f6ver inte vara kopplat till github. Vi kommer att anv\'e4nda github. Git och github \'e4r det vanligaste alternativet.\par
\par
N\'e4r man ska bidra med en \'e4ndring m\'e5ste man spara. Det \'e4r ju inte s\'e4kert att man vill ha en ny version om man tar bort ett semikolon. F\'f6r att visa att man gjort en st\'f6rre \'e4ndring anv\'e4nder man sig av en \i commit\i0 . Man commit:ar filer. Det \'e4r en  sparning av koden med ett unikt ID.  Varje commit har ett ID, timestamp, information om vem som gjorde commiten samt ett eget meddelande fr\'e5n anv\'e4ndaren.\par
\par
\b Termer\b0\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 Working directory: Mappen du jobbar i lokalt (ditt projekt). Termen \'e5terkommer \'e4ven du d\'e5 jobbar med kommandotolken. \par
{\pntext\f1\'B7\tab}Staging area: Filer som ska skickas till servern. N\'e4r filer ska skickas upp l\'e4ggs de till i staging area.\par
{\pntext\f1\'B7\tab}Repository: H\'e4r finns alla sparade \'e4ndringar (commits). Det finns ett lokalt och ett remote repository. I princip skapas en mapp d\'e4r det finns information om alla \'e4ndringar. \par
\pard\sl240\slmult1\par
Branch. N\'e4r man ska g\'f6ra en st\'f6rre \'e4ndring ska man skapa en ny branch. Man skapar en kopia som grenar ut fr\'e5n koden man hade f\'f6rst. Den l\'f6per parallellt med all annan kod. Det finns alltid en \i master branch\i0 , en slutgiltig kod. N\'e4r man \'e4r klar med sina \'e4ndringar i sin branch sl\'e5r man ihop dem; det kallas f\'f6r \i merge\i0 . Detta skapar konflikter osv. men \'e4r f\'f6r det mesta felfritt.\par
\par
\b Termer forts.\b0\par
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 Push: Skickar \'e4ndringar till github eller den centrala servern. Man skickar kod.\par
{\pntext\f1\'B7\tab}Pull: H\'e4mtar kod som finns tillg\'e4ngligt, t.ex. fr\'e5n den centrala servern.\par
{\pntext\f1\'B7\tab}Merge: Sl\'e5r ihop branches man gjort. Sl\'e5r ihop \'e4ndringar.\par
{\pntext\f1\'B7\tab}Clone: Man kopierar bara kod. Man kopierar ett repository som finns, t.ex. som man laddat upp tidigare.\par
\pard\sl240\slmult1\par
Git & bash. Git \'e4r ett program. Git anv\'e4nds genom terminalen eller git bash. Allts\'e5 via kommandon. Terminalen kan anv\'e4ndas till m\'e5nga, m\'e5nga grejer och man kan k\'f6ra m\'e5nga program. D\'e4rf\'f6r ska vi l\'e4ra oss bash innan vi b\'f6rjar med git.\par
\par
Fokusa p\'e5 att l\'e4ra er grundl\'e4ggande kommandon i bash. Dagens uppgift beh\'f6ver inte l\'e4mnas in. Imorgon kommer en uppgift om hur man anv\'e4nder git.\par
\par
Git kommer att anv\'e4ndas genom samtliga kurser f\'f6r att l\'e4tt dela kod. Vi kommer l\'e4ra oss mer och mer om det under kursens g\'e5ng men det finns inget krav p\'e5 att man ska l\'e4ra sig allt imorgon. Kursen har d\'e4remot ett examinerande git-moment (det \'e4r inte det imorgon).\par
}
 