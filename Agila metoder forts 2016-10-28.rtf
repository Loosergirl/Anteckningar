{\rtf1\ansi\ansicpg1252\deff0\deflang1053{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sl240\slmult1\lang29\b\f0\fs32 Agile development methods: Philosophy and practice\b0\fs22\par
Allting \'e4r p\'e5 engelska. Vi anv\'e4nder engelska termer hela tiden. D\'e4rf\'f6r \'e4r slide:n p\'e5 engelska. Allt som st\'e5r p\'e5 sliden \'e4r inte med i de h\'e4r anteckningarna eftersom Elias bara rabblade upp en hel del av det.\par
\par
Agil utveckling \'e4r mer \'e4n bara en metod. Det handlar om hur man ser p\'e5 saker och ting och inte bara vad man g\'f6r. Hur man f\'f6rh\'e5ller sig till problem, till ett fl\'f6de av aktiviteter. Vi beh\'f6ver f\'f6rst\'e5 metoden bakom. \par
\par
Innan n\'e5gon kommit p\'e5 agila metoder tyckte man vattenfallsmetoden var tung och inte tillr\'e4ckligt fokuserad p\'e5 personerna som jobbade med den. Nya metoder kom fram, de kalledes "light processes". N\'e4r man m\'e4rkte att det inte fanns n\'e5gon gemensam standard f\'f6r vad detta var (metoderna) hade stora bolag en konferens d\'e4r man best\'e4mde sig f\'f6r att kalla metoderna f\'f6r \i agile \i0 eller \i lights\i0 . \par
\par
Ett manifest gjordes med ett antal principer som agila metoder ska f\'f6rh\'e5lla sig till. Fokus var vad metoderna hade gemensamt. Man kom att v\'e4rdera andra saker h\'f6gre (individer och interaktion \'e4r viktigare \'e4n processer och verktyg, fungerande mjukvara hellre \'e4n omfattande dokumentation, kundsamarabete hellre \'e4n kontraktf\'f6rhandlingar, reagera p\'e5 f\'f6r\'e4ndring hellre \'e4n att f\'f6lja en plan). Naturligtvis v\'e4rderade man \'e4ven de andra sakerna men det var inte lika viktigt.\par
\par
Man utvecklade ocks\'e5 tolv principer i samband med manifestot (se slide:n). \par
\par
Individer och interaktion \'e4r viktigare \'e4n processer och verktyg. Utvecklingsmilj\'f6 och projektplan hj\'e4lper till, men en bra dator leder inte till att man skriver bra kod. Det hj\'e4lper inte att man \'e4r superduktiga var och en f\'f6r sig. Om man jobbar tillsammans blir man b\'e4ttre. Det \'e4r viktigt att man kan jobba bra i team och hj\'e4lpas \'e5t att l\'f6sa problem. Verktyg kan vara hj\'e4lpsamma men \'e4r inte n\'e5gon garanti f\'f6r att det blir bra. \'c4r det n\'e5got man verkligen litar p\'e5 kan man f\'f6rringa sin egen input i arbetet och det blir bara pannkaka av allt.\par
\par
Fungerande mjukvara hellre \'e4n omfattande dokumentation. Det kan vara d\'e5ligt att ha f\'f6r mycket dokumentation; b\'e4ttre med f\'f6r lite \'e4n f\'f6r mycket. Fokus ska ligga p\'e5 att producera n\'e5got och inte beskriva det. Naturligtvis kr\'e4vs dokumentation ibland. Men skriv inte n\'e5got om det inte beh\'f6vs omedelbart.\par
\par
Kundsamarabete hellre \'e4n kontraktf\'f6rhandlingar. Det g\'e5r inte att f\'f6rst best\'e4mma vad man ska g\'f6ra och sedan bara leverera det utan att ha l\'f6pande kontakt under arbetets g\'e5ng. Fokusera p\'e5 hur kunden ska anv\'e4nda n\'e5got och hur ni ska samarbeta under v\'e4gen snarare \'e4n att ta fram exakta utr\'e4kningar f\'f6r tid och kostnad.\par
\par
Reagera p\'e5 f\'f6r\'e4ndring hellre \'e4n att f\'f6lja en plan. Lova inte att vara klar vid en viss tidpunkt ifall det blir annorlunda \'e4n vad ni t\'e4nkt. Det fungerar inte att planera ett helt projekt i f\'f6rv\'e4g och sedan inte \'e4ndra n\'e5got. Var realistisk i planeringen kring vad man ska arbeta med, ha inte en fastl\'e5st planering f\'f6r l\'e5ngt fram i tiden.\par
\par
\b\fs28 Extreme Programming (XP)\b0\fs22\par
En av de mest v\'e4lk\'e4nda agila metoderna. Den skiljer sig fr\'e5n SCRUM genom att SCRUM har ett betydligt tydligare fl\'f6de. Extreme Programming har ett l\'f6st f\'f6rh\'e5llningss\'e4tt. Kent Beck p\'e5st\'e5r sig ha kommit p\'e5 Extreme Programming. Chrysler skulle utveckla ett l\'f6nef\'f6rslag f\'f6r varje m\'e5nad. \par
\par
\pard\sl240\slmult1\b On-Site customer\b0 : Kunden och utvecklaren \'e4r p\'e5 samma st\'e4lle. De \'e4r aktivt involverade i utveclingsprocessen.\par
\par
\pard{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sl240\slmult1 Kunden ger "user stories", beskrivande funktioner (inte funktioner-funktioner) t.ex. "jag vill kunna logga in med Facebook". Dessa har man p\'e5 story cards.\par
{\pntext\f0 2.\tab}Planning game: Man har utvecklare och kunder n\'e4ra varandra hela tiden. Kostnadsber\'e4kningar g\'f6rs f\'f6r olika "stories". Senare m\'e5ste man g\'f6ra uppf\'f6ljning f\'f6r om det blev den kostnad man estimerat; det \'e4r mycket viktigt f\'f6r att f\'f6rb\'e4ttra i framtiden. Kunden f\'e5r d\'e5 beslutsr\'e4tten att best\'e4mma vad som ska g\'f6ras och kan anv\'e4nda sig av de estimerade kostnaderna f\'f6r olika "stories".\par
{\pntext\f0 3.\tab}Metaforer anv\'e4nds f\'f6r att f\'f6rklara hur projektet ska fungera och g\'e5 ihop, t.ex. likna projektet vid ett hus.\par
{\pntext\f0 4.\tab}Man g\'f6r sm\'e5 releases (man sprintar, iterativ utveckling). En liten del av produkten g\'f6rs \'e5t g\'e5ngen ist\'e4llet f\'f6r alltihop. \par
{\pntext\f0 5.\tab}Test-first programming; man testar innan man bygger in n\'e5got. Efter det testar man igen. Kunden best\'e4mmer n\'e4r n\'e5got fungerar, inte utvecklare.\par
{\pntext\f0 6.\tab}Enkel design. Man ska g\'f6ra s\'e5 lite som m\'f6jligt f\'f6r att det ska fungera s\'e5 bra som m\'f6jligt. Undvika att l\'e4gga till saker som inte \'e4r klara eller inte fungerar som de ska.\par
{\pntext\f0 7.\tab}Refactoring: Man ska jobba med sm\'e5 delar av koden hela tiden. Slutprodukten ska testas hela tiden s\'e5 att det fungerar ihop.\par
{\pntext\f0 8.\tab}Par programmering (vi \'e5terkommer till detta)\par
{\pntext\f0 9.\tab}Man hj\'e4lps \'e5t med allting och v\'e5ra roller definieras inte. D\'e4rmed blir ett fel allas fel; man \'e4r ett team och det spelar ingen roll vem som gjort fel eftersom hela teamet har gjort fel. Vi som enhet har inte lyckats uppn\'e5 m\'e5let och ingen individ klandras.\par
{\pntext\f0 10.\tab}Continuous integration: L\'e4gg upp sakerna s\'e5 vi kan hj\'e4lpas \'e5t, sitt inte och programmera sj\'e4lv. Testa, testa.\par
{\pntext\f0 11.\tab}Coding standards. Man f\'f6rh\'e5ller sig till programmeringsspr\'e5ket p\'e5 samma s\'e4tt.\par
{\pntext\f0 12.\tab}H\'e5llbar takt. Vi jobbar inte mer \'e4n vad vi ska, ingen \'f6vertid. Undantaget \'e4r sista veckan i en sprint. Bra tidsestimering hj\'e4lper oss att f\'e5 ett bra schema. Risken att sl\'f6sa bort tid minskar om man jobbar tillsammans. Administration ska inte vara f\'f6r tung.\par
\pard\sl240\slmult1\par
\par
\b Off-topic\par
\b0 Cobol \'e4r programmeringsspr\'e5ket som anv\'e4nds av de flesta stora svenska banker. Det \'e4r ett riktigt gammalt programmeringsspr\'e5k, mycket tungt. Bankerna har d\'e4rf\'f6r mycket tunga system. Det \'e4r sv\'e5rt att bygga nya system. De f\'e5 Cobol-utvecklare som finns \'e4r hett eftertraktade. Bankerna kommer d\'e4remot snart f\'e5 g\'f6ra nya system.\par
\par
\b\fs28 Sv\'e5righeter och utmaningar med Agil utveckling\par
\b0\fs22 Odefinierade m\'e5l. Ofta har man m\'e5l trots att man anv\'e4nder agil utveckling. Det g\'e5r inte att helt komma undan den klassiska projektmetoden. En risk \'e4r ocks\'e5 att ett projekt aldrig tar slut. Bara 30% av allt som g\'f6rs blir verklighet. Agila metoder \'e4r d\'e4remot en f\'f6ruts\'e4ttning f\'f6r att det ska lyckas; det \'e4r mer sannolikt att utvecklarna blir f\'e4rdiga.\par
\par
Man beh\'f6ver en tydlig kund som \'e4r v\'e4l insatt i projektet. \par
\par
Fungerar det i verkligheten? \par
\par
Agila metoder fungerar bara med sm\'e5 team. D\'e4rf\'f6r f\'e5r man g\'f6ra flera team om f\'f6retaget \'e4r stort.\par
\par
\b Hur g\'f6r ett f\'f6retag f\'f6r att ta till sig en ny projektmetod?\b0\par
En bank sa att de skulle inf\'f6ra SCRUM. Till slut gick ledningen med p\'e5 det. Man tog in tv\'e5 SCRUM masters som konsulter och de var d\'e4r ett tag och satte ig\'e5ng dem. N\'e4r SCRUM masters l\'e4mnade f\'f6ll det ihop och man \'e5tergick l\'e5ngsamt till den gamla metoden. \par
\par
Det \'e4r mycket sv\'e5rt att implementera en agil projektmetod p\'e5 ett stort f\'f6retag. Det finns en extrem tr\'f6ghet i gamla, stora, organisationer. I de fall n\'e4r man lyckats med en \'f6verg\'e5ng har man beh\'e5llit konsulterna under en l\'e4ngre tid eller till och med anst\'e4llt dem. Sm\'e5 moderna f\'f6retag jobbar alltid agilt. \par
\par
---------------\par
}
 